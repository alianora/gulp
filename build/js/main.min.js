"use strict";function filledPlaceholder(e){$(e).val()?$(e).parent().addClass("filled"):$(e).parent().removeClass("filled")}function offTheTarget(e,t){$(document).on("mousedown",function(i){$(e).is(i.target)||0!==$(e).has(i.target).length||t()})}function initTabs(e,t){$(e).each(function(){var e=$(this).children("div");t&&e.attr("style",""),e.hide().filter(":first").show(),$(this).find(".tab-list a").click(function(){return e.hide(),e.filter(this.hash).show(),$(".tab-list a").removeClass("active"),activeTab($(this)),$(this).addClass("active"),!1}).filter(":first").click()})}!function(e){e(document).ready(function(){var t=(e("html").innerWidth(),e(".header"));e(window).scroll(function(){var i=e(this).scrollTop();i>=105?(t.addClass("header-stiky"),e(".header-top__logo-img").attr("src","../img/icons-png/logo_black.png")):i<150&&(t.removeClass("header-stiky"),e(".header-top__logo-img").attr("src","../img/icons-png/logo_white.png"))});e(".banner__slider").slick({slidesToScroll:1,centerMode:!0,arrows:!1,dots:!1,variableWidth:!0}),e(".clients__slider").slick({slidesToShow:4,slidesToScroll:4,arrows:!1,dots:!0,responsive:[{breakpoint:1024,settings:{slidesToShow:3,slidesToScroll:3}},{breakpoint:798,settings:{slidesToShow:2,slidesToScroll:2}},{breakpoint:640,settings:{slidesToShow:2,slidesToScroll:2}}]}),e(".btn-burger").on("click",function(){e(".mobile-menu").slideToggle(300,function(){return e('<div class="overlay"></div>').prependTo(e("body")),e("body").addClass("hidden"),"none"===e(this).css("display")&&(e(".overlay").remove(),e(this).removeAttr("style"),e("body").removeAttr("class")),!1})}),e(window).resize(function(){e(window).width()>=768&&e(".burger-menu__list").removeAttr("style")}),e(".validation__input,.validation__textarea").each(function(){filledPlaceholder(this)}).on("blur",function(){filledPlaceholder(this)}),e("select").select2({minimumResultsForSearch:-1}),e(".phone-mask").mask("+38 (999) 999-9999"),e(document).on("click",".validation__pass-view",function(){var t=e(this).prevAll("input");e(this).toggleClass("show"),console.log(t.attr("type")),"password"==t.attr("type")?t.attr("type","text"):t.attr("type","password")}),offTheTarget(".language-switch",function(){e(".language-switch").removeClass("open")}),Modernizr.objectfit||e(".object-fit").each(function(){var t=e(this),i=t.find("img").prop("src");i&&t.css("backgroundImage","url("+i+")").addClass("compat-object-fit")})})}(jQuery),$(document).on("click",".language-switch",function(){$(this).toggleClass("open")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
